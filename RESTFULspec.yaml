openapi: 3.0.3
info:
  title: Default Project API
  description: |-
    Hopefully solves stuff
  version: 1.0.0
servers:
  - url: https://somewhere.io/api/
tags:
  - name: fs
    description: Everything about your Files
  - name: solve
    description: Everything about your Solvers
  - name: user
    description: Everything about your User
  - name: admin
    description: Administrative functions
paths:
  /fs:
    post:
      tags:
        - fs
      summary: Submit a file
      description: Submits a file to the users files
      operationId: createFile
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
    get:
      tags:
        - fs
      summary: Lists files
      description: Retrieves a list of all the users files
      operationId: getFiles
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Files'
  /fs/{fileid}:
    get:
      tags:
        - fs
      summary: Gets a file
      description: Returns a file
      operationId: getFile
      parameters:
        - name: fileid
          in: path
          description: The file id
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    patch:
      tags:
        - fs
      summary: Changes a file
      description: Replaces an existing user file
      operationId: changeFile
      parameters:
        - name: fileid
          in: path
          description: The file id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
    delete:
      tags:
        - fs
      summary: Deletes a file
      description: Deletes a file
      operationId: deleteFile
      parameters:
        - name: fileid
          in: path
          description: The file id
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
  /solve:
    post:
      tags:
        - solve
      summary: Create job
      description: |-
        Creates a job.
        
        Its important to note that you can specify multiple solvers to run concurrently.
        
        When the first solver completely finishes, the others should be killed.
      operationId: createJob
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCreate'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    get:
      tags:
        - solve
      summary: Gets jobs
      description: Retrieves a list of the users jobs
      operationId: getJobs
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
  /solve/available:
    get:
      tags:
        - solve
      summary: Gets available solvers
      description: Retrieves a list of all available solvers
      operationId: getSolvers
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Solvers'
    post:
      tags:
        - solve
      summary: Adds a new solver
      description: Adds a new solver (admin only)
      operationId: addSolvers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Solver'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Solvers'
    delete:
      tags:
        - solve
      summary: Delete a solver
      description: Deletes a solver (admin only)
      operationId: deleteSolvers
      parameters:
        - name: solverid
          in: query
          description: The id of the solver to delete
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Solvers'
  /solve/{jobid}:
    get:
      tags:
        - solve
      summary: Get job status
      description: Gets a jobs status
      operationId: getJob
      parameters:
        - name: jobid
          in: path
          description: The job id
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    delete:
      tags:
        - solve
      summary: Deletes a job
      description: Stops and deletes a job
      operationId: deleteJob
      parameters:
        - name: jobid
          in: path
          description: The job id
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    #TODO: Add solver?
    patch:
      tags:
        - solve
      summary: Kills a specific solver
      description: Kills a specific solver for a job
      operationId: killSolver
      parameters:
        - name: jobid
          in: path
          description: The job id
          required: true
          schema:
            type: string
        - name: solverid
          in: query
          description: The id of the solver to kill
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: Creates a user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{userid}:
    get:
      tags:
        - user
      summary: Get user info
      description: Get user information by userid (if permitted)
      operationId: getUserByName
      parameters:
        - name: userid
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'       
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user capabilities
      description: This can only be done by an admin.
      operationId: updateUser
      parameters:
        - name: userid
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permissions'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userid
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /admin/fs/{userid}:
    get:
      tags:
        - admin
      summary: List user files
      description: Retrieves a list of all the users files
      operationId: getUserFiles
      parameters:
        - name: userid
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Files'
  /admin/users:
    get:
      tags:
        - admin
      summary: List users
      description: Returns a list of all users
      operationId: getAllUsers
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /admin/solve:
    get:
      tags:
        - admin
      summary: Lists jobs
      description: Returns a list of all jobs
      operationId: listJobs
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
  /admin/solve/{userid}:
    get:
      tags:
        - admin
      summary: Lists users jobs
      description: Returns a list of all jobs from a user
      operationId: listUserJobs
      parameters:
        - name: userid
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
components:
  schemas:
    File:
      type: object
      properties:
        id:
          type: string
          example: 213
        name:
          type: string
          example: job.mzn
    Files:
      type: array
      items:
        $ref: '#/components/schemas/File'
    Solver:
      type: object
      properties:
        name:
          type: string
          example: gecode
        id:
          type: string
          example: 123
    Solvers:
      type: array
      items: 
        $ref: '#/components/schemas/Solver'
    Job:
      type: object
      allOf:
      - $ref: '#/components/schemas/JobCreate'
      - properties:
          status:
            type: string
            enum: [succeeded, suboptimal, inprogress, failed]
            example: inprogress
      xml:
        name: user
    JobCreate:
      type: object
      properties:
        solver:
          type: array
          items:
            properties:
              id:
                type: string
                description: The solver id
                example: 123
              cores:
                type: integer
                example: 2
              ram:
                type: integer
                description: In megabytes
                example: 64
        mzn:
          type: string
          description: The file id
          example: 123
        dzn:
          type: string
          description: The file id
          example: 123
        timeout:
          type: integer
          description: In seconds
          example: 120
      xml:
        name: user
    UserCreate:
      type: object
      properties:
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
      xml:
        name: user
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        permissions:
          $ref: '#/components/schemas/Permissions'
      xml:
        name: user
    Permissions:
      type: object
      properties:
        #MB limit for fs usage?
        cores:
          type: integer
          format: int64
          example: 10
        ram:
          type: integer
          description: in megabyte
          format: int64
          example: 64
        maxtimeout:
          type: integer
          description: in seconds
          format: int64
          example: 10
      xml:
        name: permissions
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
    api_key:
      type: apiKey
      name: api_key
      in: header